{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://raw.githubusercontent.com/nf-core/dmsqc/master/assets/schema_input.json",
    "title": "nf-core/dmsqc pipeline - params.input schema",
    "description": "Schema for the file provided with params.input",
    "type": "array",
    "items": {
        "type": "object",
        "properties": {
            "sample": {
                "type": "string",
                "pattern": "^[^\\s/]+$",
                "errorMessage": "Sample name must be provided, cannot contain spaces, and must not include special characters",
                "meta": ["id"]
            },
            "file1": {
                "type": "string",
                "format": "file-path",
                "exists": true,
                "pattern": "^\\S+\\.(bam|fastq|fq|fastq\\.gz|fq\\.gz)$",
                "allOf": [
                    {
                        "if": {
                            "pattern": "^\\S+\\.bam$"
                        },
                        "then": {
                            "pattern": "^\\S+_(pe|se)\\.bam$",
                            "errorMessage": "If file1 ends with .bam, it must contain '_pe.bam' or '_se.bam', defining paired-end or single-end"
                        }
                    }
                ],
                "errorMessage": "File 1 must be provided, cannot contain spaces, and must have an allowed extension (.bam, .fastq, .fq, .fastq.gz, .fq.gz)"
            },
            "file2": {
                "type": ["string", "null"],
                "format": "file-path",
                "exists": true,
                "pattern": "^\\S+\\.(fastq|fq|fastq\\.gz|fq\\.gz)$",
                "errorMessage": "File 2 must have an allowed extension (.fastq, .fq, .fastq.gz, .fq.gz) or be null for single-end reads"
            },
            "type": {
                "type": "string",
                "enum": ["input", "output", "quality"],
                "errorMessage": "Type must be one of: input, output, or quality"
            },
            "replicate": {
                "type": "integer",
                "minimum": 1,
                "errorMessage": "Replicate must be a positive integer"
            }
        },
        "required": ["sample", "file1", "type", "replicate"]
    }
}
